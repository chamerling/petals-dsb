<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book id="soap" lang="en">
  <bookinfo id="soap-bookinfo">
    <title>PEtALS-BC-SOAP</title>

    <authorgroup>
      <author>
        <surname>HAMERLING</surname>

        <firstname>Christophe</firstname>

        <email>christophe.hamerling@ebmwebsourcing.com</email>
      </author>

      <author>
        <surname>DENEUX</surname>

        <firstname>Christophe</firstname>

        <email>christophe.deneux@capgemini.com</email>
      </author>

      <corpauthor>PEtALS Team</corpauthor>
    </authorgroup>

    <legalnotice>
      <para>(CC) EBM WebSourcing - This work is licensed under the Creative
      Commons Attribution-NonCommercial-ShareAlike License. To view a copy of
      this license, visit
      http://creativecommons.org/licenses/by-nc-sa/3.0/</para>
    </legalnotice>

    <abstract>
      <para>This document explains how to install, configure and use the
      petals-bc-soap JBI component.</para>
    </abstract>

    <date>May 2009</date>
  </bookinfo>

  <preface id="soap-preface">
    <title>PETALS-BC-SOAP</title>

    <para>This binding component allows to interact with external Web Services
    (SOAP service over HTTP, REST service) and to expose JBI services as Web
    Services (SOAP service over HTTP, SOAP service over JMS, REST
    service).</para>

    <para>A JBI <code>MessageExchange</code> sent to a ServiceEndpoint (mapped
    to a Web Service) is transformed into a SOAP message and sent to the
    linked external web service. A SOAP message received on an exposed web
    service is transformed into a JBI MessageExchange and sent to the
    corresponding JBI ServiceEndpoint.</para>

    <para>This component is based on the PEtALS CDK.</para>

    <para><remark>If you want more details about SOAP, you can consult this
    W3C specification : <ulink
    url="http://www.w3.org/TR/soap/">http://www.w3.org/TR/soap/</ulink></remark></para>

    <para><remark>If you want more details about SOAP over JMS, you can
    consult this W3C specification : <ulink
    url="http://www.w3.org/TR/soapjms/">http://www.w3.org/TR/soapjms/</ulink></remark></para>
  </preface>

  <chapter id="soap-features">
    <title>Features</title>

    <para>The petals-bc-soap is based on the petals-cdk v5.x, <ulink
    url="http://ws.apache.org/axis2/">Apache Axis2 </ulink> v1.4.1 and <ulink
    url="http://www.mortbay.org">Mortbay Jetty</ulink> v6.1.4. It provides the
    following features :</para>

    <itemizedlist>
      <listitem>
        <para>Expose JBI Services as Web Services over HTTP or JMS</para>
      </listitem>

      <listitem>
        <para>Expose JBI Services as REST Services</para>
      </listitem>

      <listitem>
        <para>Expose Web Services as JBI Services</para>
      </listitem>

      <listitem>
        <para>Expose REST Services as JBI Services</para>
      </listitem>

      <listitem>
        <para>Handle SOAP attachments. The attachments of the incoming SOAP
        message are placed into the JBI message as attachments; the JBI
        attachments are placed in the outgoing SOAP message as
        attachments.</para>
      </listitem>

      <listitem>
        <para>WS-Addressing. Use WS-Addressing to dynamically choose the JBI
        service or the Web Service to call.</para>
      </listitem>

      <listitem>
        <para>WS-notification. The component can send/receive web service
        notifications to/from external subscribers/producers.</para>
      </listitem>

      <listitem>
        <para>WS-Security, WS-SecureConversation and WS-Policy via the
        addition of the Rampart's Axis2 module.</para>
      </listitem>
    </itemizedlist>
  </chapter>

  <chapter id="soap-compo-config">
    <title>Component Configuration</title>

    <para>The component can be configured through its JBI descriptor file like
    this :</para>

    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbi:jbi version="1.0" xmlns:jbi="http://java.sun.com/xml/ns/jbi"
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0"
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"&gt;
 &lt;jbi:component type="binding-component"
  bootstrap-class-loader-delegation="parent-first"&gt;
  &lt;jbi:identification&gt;
   &lt;jbi:name&gt;petals-bc-soap&lt;/jbi:name&gt;
   &lt;jbi:description&gt; The SOAP Binding Component (based on Axis2 + Jetty)&lt;/jbi:description&gt;
  &lt;/jbi:identification&gt;
  &lt;jbi:component-class-name&gt;<emphasis>org.ow2.petals.binding.soap.SoapComponent</emphasis>&lt;/jbi:component-class-name&gt;
  &lt;jbi:component-class-path&gt;...&lt;/jbi:component-class-path&gt;
  &lt;jbi:bootstrap-class-name&gt;<emphasis>org.ow2.petals.binding.soap.SoapBootstrap</emphasis>&lt;/jbi:bootstrap-class-name&gt;
  &lt;jbi:bootstrap-class-path&gt;...&lt;/jbi:bootstrap-class-path&gt;

  &lt;jbi:shared-library version="5.2.0"&gt;<emphasis role="bold">petals-sl-jms-activemq</emphasis>&lt;/jbi:shared-library&gt;

  &lt;!-- Component Development Kit Parameters --&gt;
  &lt;petalsCDK:acceptor-pool-size&gt;5&lt;/petalsCDK:acceptor-pool-size&gt;
  &lt;petalsCDK:processor-pool-size&gt;10&lt;/petalsCDK:processor-pool-size&gt;
  &lt;petalsCDK:ignored-status&gt;<emphasis>DONE_AND_ERROR_IGNORED</emphasis>&lt;/petalsCDK:ignored-status&gt;
  &lt;petalsCDK:properties-file /&gt;
  &lt;petalsCDK:performance-notifications&gt;false&lt;/petalsCDK:performance-notifications&gt;
  &lt;petalsCDK:jbi-listener-class-name&gt;<emphasis>org.ow2.petals.binding.soap.listener.outgoing.JBIListener</emphasis>&lt;/petalsCDK:jbi-listener-class-name&gt;
  &lt;petalsCDK:external-listener-class-name&gt;<emphasis>org.ow2.petals.binding.soap.listener.incoming.SoapExternalListener</emphasis>&lt;/petalsCDK:external-listener-class-name&gt;

  &lt;!-- SOAP Component Parameters --&gt;
  &lt;soap:http-port&gt;<emphasis role="bold">8084</emphasis>&lt;/soap:http-port&gt;
  &lt;soap:http-host&gt;<emphasis role="bold">148.39.34.45</emphasis>&lt;/soap:http-host&gt;
  &lt;soap:http-services-list&gt;<emphasis role="bold">true</emphasis>&lt;/soap:http-services-list&gt;
  &lt;soap:http-services-context&gt;<emphasis role="bold">petals</emphasis>&lt;/soap:http-services-context&gt;
  &lt;soap:http-services-mapping&gt;<emphasis role="bold">services</emphasis>&lt;/soap:http-services-mapping&gt;
  &lt;soap:http-thread-pool-size-min&gt;<emphasis role="bold">2</emphasis>&lt;/soap:http-thread-pool-size-min&gt;
  &lt;soap:http-thread-pool-size-max&gt;<emphasis role="bold">50</emphasis>&lt;/soap:http-thread-pool-size-max&gt;
  &lt;soap:http-acceptors&gt;<emphasis role="bold">4</emphasis>&lt;/soap:http-acceptors&gt;

  &lt;!-- JMS transport layer, default JMS connection factory --&gt;
  &lt;soap:java-naming-factory-initial&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/soap:java-naming-factory-initial&gt;
  &lt;soap:java-naming-provider-url&gt;tcp://localhost:61616&lt;/soap:java-naming-provider-url&gt;
  &lt;soap:jms-connection-factory-jndiname&gt;QueueConnectionFactory&lt;/soap:jms-connection-factory-jndiname&gt;--&gt;
 &lt;/jbi:component&gt;
&lt;/jbi:jbi&gt;</screen>

    <para><warning>
        <para>The class name values in italic should not be modified by the
        user.</para>
      </warning></para>

    <para>To be able to activate the JMS transport layer (SOAP over JMS), it
    is needed to provide to the BC Soap the right JAR files containing all
    needed classes to interact with the JMS server. These JAR files will be
    provided using a shared library. To configure the component with this
    shared library, please use the maven-petals-plugin 2.1.0 or higher. See
    the documentation of the maven-petals-plugin to know how to do this
    configuration.</para>

    <xi:include href="../../../../../../../petals-doc/src/doc/docbook/doc-en/component-framework-tables.xml"
                xpointer="element(/1/2/2)"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../../../../../../petals-doc/src/doc/docbook/doc-en/component-framework-tables.xml"
                xpointer="element(/1/2/8)"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <table>
      <title>Configuration of the component (SOAP)</title>

      <tgroup cols="4">
        <colspec colwidth="2*" />

        <colspec colwidth="6*" />

        <colspec colwidth="*" />

        <colspec colwidth="*" />

        <thead>
          <row>
            <entry align="center">Parameter</entry>

            <entry align="center">Description</entry>

            <entry align="center">Default</entry>

            <entry align="center">Required</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry align="center"
            id="component_httpport"><property>http-port</property></entry>

            <entry>The port used by the Jetty HTTP server to handle incoming
            http requests</entry>

            <entry align="center">8084</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry align="center"
            id="component_httphost"><property>http-host</property></entry>

            <entry>Define the network interface on which the web server must
            listen. If this parameter is not set, all interfaces are used and
            listen to incoming HTTP requests.</entry>

            <entry align="center">localhost</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry
            align="center"><property>http-service-list</property></entry>

            <entry>Display the list of exposed services on
            http://&lt;HOST&gt;:&lt;PORT&gt;/&lt;CONTEXT&gt;/&lt;MAPPING&gt;/listServices
            (where CONTEXT= http-service-context parameter value, mapping =
            http-service-mapping attribute value).</entry>

            <entry align="center">true</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry
            align="center"><property>http-thread-pool-size-min</property></entry>

            <entry>Minimun size of the Jetty HTTP server thread pool</entry>

            <entry align="center">2</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry
            align="center"><property>http-thread-pool-size-max</property></entry>

            <entry>Maximun size of the Jetty HTTP server thread pool</entry>

            <entry align="center">50</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry align="center"><property>http-acceptors</property></entry>

            <entry>Number of Jetty HTTP acceptors</entry>

            <entry align="center">4</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry align="center"
            id="component_httpcontext"><property>http-service-context</property></entry>

            <entry>Context of the exposed services</entry>

            <entry align="center">petals</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry align="center"
            id="component_httpmapping"><property>http-service-mapping</property></entry>

            <entry>Mapping of the exposed services</entry>

            <entry align="center">services</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry align="center"><property
            id="component_java-naming-factory-initial">java-naming-factory-initial</property></entry>

            <entry>The initial context factory class needed to access the JNDI
            server where the default JMS connection factory can be
            found.</entry>

            <entry align="center">-</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry align="center"><property
            id="component_java-naming-provider-url">java-naming-provider-url</property></entry>

            <entry>The JNDI provider URL where the default JMS connection
            factory can be found</entry>

            <entry align="center">-</entry>

            <entry align="center">No</entry>
          </row>

          <row>
            <entry align="center"><property
            id="component_jms-connection-factory-jndiname">jms-connection-factory-jndiname</property></entry>

            <entry>Name of the default JMS connection factory in the
            JNDI</entry>

            <entry align="center">-</entry>

            <entry align="center">No</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The SOAP component specific parameters can be also set through JMX
    during its installation phase.</para>

    <para>At component level, a default JMS connection factory is defined if
    the following parameters are set: <link
    linkend="component_java-naming-factory-initial">java-naming-factory-initial</link>,
    <link
    linkend="component_java-naming-provider-url">java-naming-provider-url</link>
    and <link
    linkend="component_jms-connection-factory-jndiname">jms-connection-factory-jndiname</link>.
    The default JMS connection factory is used by all SU needing a JMS
    transport layer.</para>

    <remark>More information about Jetty tunning can be found <ulink
    url="http://jetty.mortbay.org/jetty5/doc/optimization.html">here</ulink>.</remark>
  </chapter>

  <chapter id="soap-service-config">
    <title>Service Configuration</title>

    <section id="soap-sendto">
      <title>Send a JBI message to an external Web Service</title>

      <subtitle>PROVIDE SERVICE : Expose an external Web Service in the JBI
      environment</subtitle>

      <figure>
        <title id="providesExternalWS">Provides an external Web Service as a
        JBI service</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentwidth="70%" depth=""
                       fileref="../../resources/images/soap_provide.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The petals-bc-soap component can expose an external Web Service as
      a JBI ServiceEndpoint. This is done by deploying a Service Unit on it
      (see <xref linkend="providesExternalWS" /> ).</para>

      <para>When a message is received on a SOAP linked endpoint from the JBI
      environment, it is transformed into a SOAP message and sent to the Web
      Service. The address of the Web Service to send the SOAP message to is
      defined at configuration time in the Service Unit descriptior or at
      runtime using the WS-Addressing feature (see WS-Addressing).</para>

      <para>The SOAP message is created like this :</para>

      <itemizedlist>
        <listitem>
          <para>The JBI message payload is wrapped in the SOAP body</para>
        </listitem>

        <listitem>
          <para>The JBI message attachments are used to create SOAP
          ones</para>
        </listitem>

        <listitem>
          <para>The JBI message exchange operation is used to create the SOAP
          action</para>
        </listitem>

        <listitem>
          <para>The JBI MEP is used to determine the SOAP MEP</para>
        </listitem>
      </itemizedlist>

      <para>The external Web Service is called, the SOAP response is
      transformed into a JBI normalized message and returned to the JBI
      environment.</para>

      <section id="soap-sendto-su-desc">
        <title>Service Unit descriptor</title>

        <para>The Service Unit descriptor file ( <filename>jbi.xml</filename>
        ) looks like this :</para>

        <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbi:jbi version="1.0" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi"
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0" 
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"
 xmlns:sample="http://petals.ow2.org/soap/sample"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;

  &lt;!-- Import a Service into PEtALS =&gt; provides a Service. --&gt;
  &lt;jbi:provides
   interface-name="sample:SoapInterface"
   service-name="sample:SoapInterface"
   endpoint-name="SoapInterfaceEndpoint"&gt;

   &lt;!-- CDK specific fields --&gt;
   &lt;petalsCDK:wsdl&gt;http://example.org/service/SampleWebService?wsdl&lt;/petalsCDK:wsdl&gt;

   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:address&gt;http://example.org/service/SampleWebService&lt;/soap:address&gt;
   &lt;soap:soap-version&gt;1.1&lt;/soap:soap-version&gt;
   &lt;soap:add-root&gt;false&lt;/soap:add-root&gt;
   &lt;soap:chunked-mode&gt;false&lt;/soap:chunked-mode&gt;
   &lt;soap:cleanup-transport&gt;true&lt;/soap:cleanup-transport&gt;
   &lt;soap:mode&gt;SOAP&lt;/soap:mode&gt;
  &lt;/jbi:provides&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;</screen>

        <xi:include href="../../../../../../../petals-doc/src/doc/docbook/doc-en/component-framework-tables.xml"
                    xpointer="element(/1/2/9)"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <xi:include href="../../../../../../../petals-doc/src/doc/docbook/doc-en/component-framework-tables.xml"
                    xpointer="element(/1/2/3)"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <table>
          <title>Configuration of a Service Unit to provide a service
          (SOAP)</title>

          <tgroup cols="4">
            <colspec colwidth="2*" />

            <colspec colwidth="6*" />

            <colspec colwidth="*" />

            <colspec colwidth="*" />

            <thead>
              <row>
                <entry align="center">Parameter</entry>

                <entry align="center">Description</entry>

                <entry align="center">Default</entry>

                <entry align="center">Required</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry align="center"><property>wsa-to</property></entry>

                <entry>Address of the external HTTP or JMS Web Service to send
                JBI messages to.<note>
                    <para>This parameter replaces the
                    <literal>address</literal> parameter used in previous
                    component releases.</para>
                  </note><note>
                    <para>To ensure backward compatibility, the
                    <literal>address</literal> parameter can be used but has
                    been deprecated.</para>
                  </note><note>
                    <para>If this parameter is not set, the service to call
                    will be deduced from the WS-Addressing properties (see
                    WS-Addressing)</para>
                  </note></entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry align="center"><property>wsa-from</property></entry>

                <entry>Under development</entry>

                <entry></entry>

                <entry></entry>
              </row>

              <row>
                <entry align="center"><property>wsa-replyto</property></entry>

                <entry>Under development</entry>

                <entry></entry>

                <entry></entry>
              </row>

              <row>
                <entry align="center"><property>mode</property></entry>

                <entry><para>The mode to be used to send SOAP message to the
                specified address.</para> <para>Possible values are :
                <literal>SOAP</literal> for basic WebService calls,
                <literal>TOPIC</literal> for WebService notifications and
                <literal>REST</literal> for REST service calls.</para> <note>
                    <para>JSON mode is under development.</para>
                  </note></entry>

                <entry align="center"><literal>SOAP</literal></entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry align="center"><property>topic-name</property></entry>

                <entry><para>The name of the Topic which will be created to
                handle WS-Notifications.<note>
                    <para>This parameter can only be used when the mode value
                    is TOPIC.</para>
                  </note></para></entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>soap-version</property></entry>

                <entry><para>The SOAP version used to create SOAP
                messages.</para> <para>Possible values are
                <literal>11</literal> and <literal>12</literal>.</para> <note>
                    <para>This parameter is used only in SOAP mode.</para>
                  </note></entry>

                <entry align="center"><literal>11</literal></entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>synchronous-timeout</property></entry>

                <entry><para>The timeout value (in milliseconds) when invoking
                a a service in the JBI bus.</para> <para> <note>
                    <para>This value override the CDK value.</para>
                  </note> </para></entry>

                <entry align="center">2000</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry align="center"><property>proxy-host</property></entry>

                <entry><para>The proxy host name.</para> <para>If it is not
                set, the proxy mode will be disabled and all others proxy
                parameters are ignored.</para></entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry align="center"><property>proxy-port</property></entry>

                <entry>The proxy host port.</entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry align="center"><property>proxy-user</property></entry>

                <entry>The proxy user.</entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>proxy-password</property></entry>

                <entry>The proxy password.</entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>proxy-domain</property></entry>

                <entry>The proxy domain.</entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>cleanup-transport</property></entry>

                <entry><para>Cleanup the transport after the Service call.
                Possible values are <literal>true</literal>,
                <literal>false</literal>.</para> <para>Not cleaning up the
                transport can cause timeouts on large number of
                calls.</para></entry>

                <entry align="center"><literal>true</literal></entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>headers-filter</property></entry>

                <entry>A value used to filter Normalized Message properties to
                be added to the outgoing SOAP message. All the normalized
                message properties which are
                <classname>org.w3c.dom.DocumentFragment</classname> instances.
                These values can be filtered at the Service Unit level with
                the <property>headers-filter</property> property. If the
                <property>headers-filter</property> property is set to
                '<property>org.ow2.petals.soap.foo.*,
                org.ow2.petals.soap.bar</property>', all the DocumentFragment
                properties which are starting with
                '<property>org.ow2.petals.soap.foo.</property>' and with
                '<property>org.ow2.petals.soap.bar</property>' will be added
                to the outgoing SOAP Header (as children).</entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>inject-headers</property></entry>

                <entry>Inject some additional headers to the outgoing SOAP
                message. All the elements of the
                <classname>org.w3c.dom.DocumentFragment</classname> Map which
                is available in the
                <property>javax.jbi.messaging.protocol.headers</property>
                message properties will be added if the Service Unit level
                property <property><property>inject-headers</property> is set
                to <property>true</property>.</property></entry>

                <entry align="center">false</entry>

                <entry align="center">No</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>

    <section id="soap-sendfrom">
      <title>Send a JBI message from an incoming SOAP message</title>

      <subtitle>CONSUME SERVICE : Expose an internal service outside of the
      JBI environment</subtitle>

      <figure>
        <title id="consumesJBIservice">Consumes a JBI service on SOAP
        message</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentwidth="70%"
                       fileref="../../resources/images/soap_consume.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The petals-bc-soap component can listen incoming SOAP messages,
      over HTTP or JMS, and send messages to a JBI ServiceEndpoint. We say
      that the component consumes the JBI service (see <xref
      linkend="consumesJBIservice" />).</para>

      <para>To expose a JBI service as Web Service, you need to deploy a
      service unit. The address extension value will be used as Axis2 Service
      name.</para>

      <para>When a SOAP message is handled by the Axis2 Service, it is
      transformed into a JBI Message and sent to the JBI ServiceEndpoint
      configured in the Service Unit. The JBI message is created like
      this:<itemizedlist>
          <listitem>
            <para>The JBI operation is created from the SOAP action.</para>
          </listitem>

          <listitem>
            <para>Copy the SOAP body into the JBI one.</para>
          </listitem>

          <listitem>
            <para>Put the SOAP attachments into JBI ones.</para>
          </listitem>

          <listitem>
            <para>Put the SOAP headers into the JBI message property named
            <property>javax.jbi.messaging.protocol.headers</property>
            according to JBI specifications (§5.5.1.1.3).</para>
          </listitem>
        </itemizedlist></para>

      <para>The list of services is available at <emphasis>http://<link
      linkend="component_httphost">HOST</link>:<link
      linkend="component_httpport">PORT</link>/<link
      linkend="component_httpcontext">CONTEXT</link>/<link
      linkend="component_httpmapping">MAPPING</link>/listServices</emphasis>
      URI.</para>

      <section>
        <title>SOAP over HTTP</title>

        <para>The component is configured to handle URIs with the <emphasis>
        http://<link linkend="component_httphost">HOST</link>:<link
        linkend="component_httpport">PORT</link>/<link
        linkend="component_httpcontext">CONTEXT</link>/<link
        linkend="component_httpmapping">MAPPING</link>/<link
        linkend="su_svcname">SVCNAME</link> </emphasis> pattern. It also
        handles ?wsdl calls; the wsdl description is retrieved from the JBI
        endpoint and sent back to the consumer.</para>

        <caution>
          <para>If the service does not provide a WSDL file; the component
          switch to a dirty mode and always considers that the requested
          service implements the requested operation. Then, It's the ''JBI''
          container or the service itself which is in charge of verifying that
          this operation if actualy available.</para>
        </caution>
      </section>

      <section>
        <title>SOAP over JMS</title>

        <para>The JMS connection factorie needed to listen JMS messages is
        configured at component level. The queue or topic to listen is deduced
        from the service.</para>
      </section>

      <section id="soap-sendfrom-su-desc">
        <title>Service Unit descriptor</title>

        <para>The Service Unit descriptor file ( <filename>jbi.xml</filename>
        ) looks like this :</para>

        <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbi:jbi version="1.0" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi"
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0"
 xmlns:sample="http://petals.ow2.org/soap/sample"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;

  &lt;!-- Expose a PEtALS Service =&gt; consumes a Service. --&gt;
  &lt;jbi:consumes
   interface-name="sample:ConsumedInterface"
   service-name="sample:ConsumedService"
   endpoint-name="ConsumedEndpoint"&gt;

   &lt;!-- CDK specific fields --&gt;
   &lt;petalsCDK:operation&gt;operation&lt;/petalsCDK:operation&gt;
   &lt;petalsCDK:mep&gt;InOut&lt;/petalsCDK:mep&gt;

   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:service-name&gt;ExposedService&lt;/soap:service-name&gt;
   &lt;soap:remove-root&gt;false&lt;/soap:remove-root&gt;
   &lt;soap:mode&gt;SOAP&lt;/soap:mode&gt; 
   &lt;!-- optional modules --&gt;
   &lt;soap:modules&gt;addressing, rampart&lt;/soap:modules&gt;
   &lt;soap:transport&gt;HTTP&lt;/soap:transport&gt;

  &lt;/jbi:consumes&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;</screen>

        <xi:include href="../../../../../../../petals-doc/src/doc/docbook/doc-en/component-framework-tables.xml"
                    xpointer="element(/1/2/10)"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <xi:include href="../../../../../../../petals-doc/src/doc/docbook/doc-en/component-framework-tables.xml"
                    xpointer="element(/1/2/4)"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <table>
          <title>Configuration of a Service Unit to consume a service
          (SOAP)</title>

          <tgroup cols="4">
            <colspec colwidth="2*" />

            <colspec colwidth="6*" />

            <colspec colwidth="*" />

            <colspec colwidth="*" />

            <thead>
              <row>
                <entry align="center">Parameter</entry>

                <entry align="center">Description</entry>

                <entry align="center">Default</entry>

                <entry align="center">Required</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry align="center"
                id="su_svcname"><property>service-name</property></entry>

                <entry><para>The name of the Axis2 Web Service that will be
                created on Service Unit deployment. It must be unique.</para>
                <para>This service is created and linked to the JBI
                context.</para> <para>Each SOAP/REST(/JSON) message received
                on this service will be forwarded to the JBI endpoint
                specified in the consumes element.</para> <para>According to
                the transport layer, the WebService will be
                accessible:<itemizedlist>
                    <listitem>
                      <para><property>HTTP</property>: at the folowing URL:
                      http://&lt;<link
                      linkend="component_httphost">HOST</link>&gt;:&lt;<link
                      linkend="component_httpport">PORT</link>&gt;/&lt;<link
                      linkend="component_httpcontext">CONTEXT</link>&gt;/&lt;<link
                      linkend="component_httpmapping">MAPPING</link>&gt;/&lt;service-name&gt;,</para>
                    </listitem>

                    <listitem>
                      <para><property>JMS</property>: using the queue or topic
                      named: &lt;service-name&gt;.</para>
                    </listitem>
                  </itemizedlist></para> <note>
                    <para>This parameter can only be used when the mode value
                    is SOAP or REST</para>
                  </note></entry>

                <entry align="center">-</entry>

                <entry align="center">Yes</entry>
              </row>

              <row>
                <entry
                align="center"><property>synchronous-timeout</property></entry>

                <entry><para>The timeout value (in milliseconds) for a client
                invokation.</para> <para>Client invokations will reach timeout
                after waiting this laps time and return a
                fault.</para></entry>

                <entry align="center">2000</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry align="center"><property>modules</property></entry>

                <entry><para>A list of Axis2 modules names (separated by
                comas) to be engaged on the new Web Service.</para>
                <para>These modules must be available in the component
                context.</para> <para>See managed bootstrap section for more
                details on how to add a module which is not natively provided
                by the component.</para></entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>service-parameters</property></entry>

                <entry>Additional XML configuration section as CDATA for
                created Axis2 service.</entry>

                <entry align="center">-</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry align="center"><property>remove-root</property></entry>

                <entry><para>Remove the root element of the payload.</para>
                <para>Possible values are: <literal>true</literal>,
                <literal>false</literal>.</para></entry>

                <entry align="center">false</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry align="center"><property>mode</property></entry>

                <entry><para>The mode to be used to send SOAP message to the
                specified address.</para> <para>Possible values are :
                <literal>SOAP</literal> for basic WebService calls,
                <literal>TOPIC</literal> for WebService notifications and
                <literal>REST</literal> for REST service calls (JSON mode is
                under development).</para></entry>

                <entry align="center"><literal>SOAP</literal></entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>enable-http-transport</property></entry>

                <entry>Enable the HTTP transport layer to send or receice SOAP
                messages. The HTTP transport is configured at component
                level.<note>
                    <para>This parameter can only be used when the mode value
                    is SOAP</para>
                  </note></entry>

                <entry align="center">true</entry>

                <entry align="center">No</entry>
              </row>

              <row>
                <entry
                align="center"><property>enable-jms-transport</property></entry>

                <entry>Enable the JMS transport layer to send or receice SOAP
                messages. The JMS transport layer is configured at component
                level: <link
                linkend="component_java-naming-factory-initial">java-naming-factory-initial</link>,
                <link
                linkend="component_java-naming-provider-url">java-naming-provider-url</link>,
                <link
                linkend="component_jms-connection-factory-jndiname">jms-connection-factory-jndiname.</link><note>
                    <para>This parameter can only be used when the mode value
                    is SOAP</para>
                  </note></entry>

                <entry align="center">true</entry>

                <entry align="center">No</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>REST Services</title>

    <section>
      <title>Introduction</title>

      <para>The SOAP binding component provides REST (REpresentational State
      Transfer (<ulink
      url="???">http://en.wikipedia.org/wiki/Representational_State_Transfer</ulink>)
      services features since release 3.1. The REST feature is provided by
      Axis2 in the component.</para>
    </section>

    <section>
      <title>Configuration</title>

      <para>The component can be configured to :</para>

      <para><itemizedlist>
          <listitem>
            <para>Provide access to an external REST Service. This service
            will be available as JBI service inside the JBI environment. Each
            JBI message received on the JBI endpoint will be used to invoke
            the external REST Service. This mode is configured with a Service
            Unit in "provider mode".</para>
          </listitem>

          <listitem>
            <para>Expose a JBI Service as REST Service. The JBI Service can be
            accessed from outside of the JBI environment like other standard
            REST Services. This mode is configured with a Service Unit in
            "consumer mode".</para>
          </listitem>
        </itemizedlist></para>

      <section>
        <title>Provide mode : Provide access to external REST Service</title>

        <para>In order to activate REST mode, the Service Unit (in provide
        mode) must be configured like</para>

        <para><screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbi:jbi version="1.0" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi"
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0" 
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"
 xmlns:sample="http://petals.ow2.org/soap/sample"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;

  &lt;!-- Import a Service into PEtALS =&gt; provides a Service. --&gt;
  &lt;jbi:provides
   interface-name="sample:SoapInterface"
   service-name="sample:SoapInterface"
   endpoint-name="SoapInterfaceEndpoint"&gt;

   &lt;!-- CDK specific fields --&gt;
   &lt;petalsCDK:mep xsi:nil="true"/&gt;

   &lt;!-- WSDL file --&gt;
   &lt;petalsCDK:wsdl&gt;http://example.org/service/SampleWebService?wsdl&lt;/petalsCDK:wsdl&gt;

   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:address&gt;<emphasis role="bold">http://example.org/param1={xpathexpression1}&amp;amp;param2={xpathexpression1}</emphasis>&lt;/soap:address&gt;
   &lt;soap:mode&gt;<emphasis role="bold">REST</emphasis>&lt;/soap:mode&gt;
   &lt;soap:rest-http-method&gt;<emphasis role="bold">GET</emphasis>&lt;/soap:rest-http-method&gt;
  &lt;/jbi:provides&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;
</screen><itemizedlist>
            <listitem>
              <para>The address parameter can be configured with placeholders.
              In the previous code snippet, the placeholder is <code>the
              bracket {}</code>. The placeholder will be replaced by the
              result of the XPath expression defined inside of the
              placeholder. The XPath expression is performed on the content of
              the incoming JBI message. The placeholders will be replaced in
              the adress parameter to build the final URI according to the
              result of the XPath expression.</para>
            </listitem>

            <listitem>
              <para>The mode parameter must be set to REST to enable REST
              feature in component.</para>
            </listitem>

            <listitem>
              <para>Possible rest-http-method parameter values are GET, POST,
              PUT, DELETE (default is GET). It will be used in provider mode
              by Axis2 as HTTP method invokation.</para>

              <para><itemizedlist>
                  <listitem>
                    <para>GET : The JBI message is only used to create the URI
                    of the REST service to be invoked with the placeholders
                    mechanism.</para>
                  </listitem>

                  <listitem>
                    <para>POST : The JBI message is sent to the REST
                    service.</para>
                  </listitem>

                  <listitem>
                    <para>PUT : The JBI message is sent to the REST
                    service.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section id="soap-restexpose">
        <title>Consume mode : Expose JBI Service as as REST Service</title>

        <para><screen>&lt;jbi:jbi version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi"
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0"
 xmlns:helloworld="http://petals.ow2.org/helloworld"
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;
  &lt;!-- Import a Service into PEtALS =&gt; provides a Service. --&gt;
  &lt;jbi:consumes interface-name="helloworld:Helloworld" service-name="helloworld:HelloworldService" endpoint-name="HelloworldEndpoint"&gt;
   &lt;!-- CDK specific fields --&gt;

   &lt;petalsCDK:mep&gt;InOut&lt;/petalsCDK:mep&gt;
   &lt;petalsCDK:operation&gt;<emphasis role="bold">getXXX</emphasis>&lt;/petalsCDK:operation&gt;
   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:address&gt;<emphasis role="bold">RESTServiceName</emphasis>&lt;/soap:address&gt;
   &lt;soap:mode&gt;<emphasis role="bold">REST</emphasis>&lt;/soap:mode&gt;
   &lt;soap:rest-add-namespace-uri&gt;http://petals.ow2.org/soapbc&lt;/soap:rest-add-namespace-uri&gt;
   &lt;soap:rest-add-namespace-prefix&gt;ns1&lt;/soap:rest-add-namespace-prefix&gt;
   &lt;soap:rest-remove-prefix-on-response&gt;<emphasis role="bold">*</emphasis>&lt;/soap:rest-remove-prefix-on-response&gt;
  &lt;/jbi:consumes&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;
</screen><itemizedlist>
            <listitem>
              <para>The <code>address</code> parameter is used to create the
              Axis2 WebService that will be accessible from outside of the JBI
              environment. This is the same mechanism as for the standard
              WebService created without REST mode.</para>
            </listitem>

            <listitem>
              <para>The <code>mode</code> parameter value set to REST enable
              REST feature on the newly created WebService. Without this
              parameter, the REST mode is unactive.</para>
            </listitem>

            <listitem>
              <para>The <code>rest-add-namespace-uri</code> parameter is used
              to add a namespace to the generated JBI message.</para>
            </listitem>

            <listitem>
              <para>The <code>rest-add-namespace-prefix</code> parameter is
              used to specify the prefix to be used for the namespace
              specified by the rest.add-namespace-uri parameter. Default value
              is petalsbcsoaprest.</para>
            </listitem>

            <listitem>
              <para>The <code>rest-remove-prefix-on-response</code> is used to
              specify the prefix namespaces to be removed on message response.
              The values have to be specified in Coma Separated Value format
              like 'ns1,ns2'. The special value '*' is used to remove all the
              namespaces.</para>
            </listitem>
          </itemizedlist></para>

        <para>The component will create a JBI message depending on the
        http-method used in the incoming request :</para>

        <para><itemizedlist>
            <listitem>
              <para>GET : A JBI message is created from the URL
              parameters</para>
            </listitem>

            <listitem>
              <para>POST/PUT/DELETE : The incoming XML message is used to
              create the JBI message.</para>
            </listitem>
          </itemizedlist>In all the cases the namespaces are added to the JBI
        message if they are specified in the Service Unit
        configuration.</para>

        <para>The JBI operation is created from the incoming REST query. The
        operation is extracted from the URL. A URL like
        <code>http://&lt;host&gt;:&lt;port&gt;/petals/services/RESTService/operation?param1=value1&amp;param2=value2</code>
        will produce the '<code>operation</code>' JBI operation.</para>
      </section>
    </section>

    <section>
      <title>Samples</title>

      <section>
        <title>Provide mode</title>

        <para>In this sample, we are going to provide the Yahoo Weather
        Service (<ulink url="???">http://developer.yahoo.com/weather/</ulink>)
        as JBI Service inside the JBI environment. It is possible by
        configuring a Service Unit in provider mode :</para>

        <para><screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbi:jbi version="1.0" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0" 
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"
 xmlns:sample="http://petals.ow2.org/soap/sample"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;

  &lt;!-- Import a Service into PEtALS =&gt; provides a Service. --&gt;
  &lt;jbi:provides
   interface-name="sample:YahooWeatherInterface"
   service-name="sample:YahooWeatherService"
   endpoint-name="YahooWeatherEndpoint"&gt;

   &lt;!-- CDK specific fields --&gt;
   &lt;petalsCDK:mep xsi:nil="true"/&gt;
   
   &lt;!-- WSDL file --&gt;
   &lt;petalsCDK:wsdl&gt;<emphasis role="bold">Weather.wsdl</emphasis>&lt;/petalsCDK:wsdl&gt;

   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:address&gt;<emphasis role="bold">http://weather.yahooapis.com/forecastrss?p={/*[local-name()='getWeather'][1]/*[local-name()='citycode'][1]}&amp;amp;u={/*[local-name()='getWeather'][1]/*[local-name()='unit'][1]}</emphasis>&lt;/soap:address&gt;
   &lt;soap:mode&gt;<emphasis role="bold">REST</emphasis>&lt;/soap:mode&gt;
   &lt;soap:rest-http-method&gt;<emphasis role="bold">GET</emphasis>&lt;/soap:rest-http-method&gt;
  &lt;/jbi:provides&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;
</screen>When receiving a JBI message on the activated JBI endpoint, the final
        address will be built from the JBI message payload. For example if the
        following JBI message :</para>

        <para><screen>&lt;weat:getWeather xmlns:weat="http://petals.ow2.org/services/weather"&gt;
  &lt;citycode&gt;FRXX0099&lt;/citycode&gt;
  &lt;unit&gt;c&lt;/unit&gt;
&lt;/weat:getWeather&gt;</screen>is associated with the address parameter
        value
        <code>http://weather.yahooapis.com/forecastrss?p={/*[local-name()='getWeather'][1]/*[local-name()='citycode'][1]}&amp;amp;u={/*[local-name()='getWeather'][1]/*[local-name()='unit'][1]}</code>
        will produce the URI
        <code>http://weather.yahooapis.com/forecastrss?p=FRXX0099&amp;u=c</code>.</para>

        <para>The JBI message response returned by the Yahoo Weather REST
        service is :</para>

        <para><screen>&lt;rss version="2.0" xmlns:yweather="http://xml.weather.yahoo.com/ns/rss/1.0" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"&gt;
  &lt;channel&gt;
    &lt;title&gt;Yahoo! Weather - Toulouse, FR&lt;/title&gt;
    &lt;link&gt;http://us.rd.yahoo.com/dailynews/rss/weather/Toulouse__FR/*http://weather.yahoo.com/forecast/FRXX0099_c.html&lt;/link&gt;
    &lt;description&gt;Yahoo! Weather for Toulouse, FR&lt;/description&gt;
    &lt;language&gt;en-us&lt;/language&gt;
    &lt;lastBuildDate&gt;Thu, 06 Mar 2008 3:00 pm CET&lt;/lastBuildDate&gt;
    &lt;ttl&gt;60&lt;/ttl&gt;
    &lt;yweather:location city="Toulouse" country="FR" region=""/&gt;
    &lt;yweather:units distance="km" pressure="mb" speed="kph" temperature="C"/&gt;
    &lt;yweather:wind chill="3" direction="310" speed="37"/&gt;
    &lt;yweather:atmosphere humidity="37" pressure="0" rising="0" visibility="999"/&gt;
    &lt;yweather:astronomy sunrise="7:22 am" sunset="6:50 pm"/&gt;
    &lt;image&gt;
      &lt;title&gt;Yahoo! Weather&lt;/title&gt;
      &lt;width&gt;142&lt;/width&gt;
      &lt;height&gt;18&lt;/height&gt;
      &lt;link&gt;http://weather.yahoo.com/&lt;/link&gt;
      &lt;url&gt;http://l.yimg.com/us.yimg.com/i/us/nws/th/main_142b.gif&lt;/url&gt;
    &lt;/image&gt;
    &lt;item&gt;
      &lt;title&gt;Conditions for Toulouse, FR at 3:00 pm CET&lt;/title&gt;
      &lt;geo:lat&gt;43.61&lt;/geo:lat&gt;
      &lt;geo:long&gt;1.45&lt;/geo:long&gt;
      &lt;link&gt;http://us.rd.yahoo.com/dailynews/rss/weather/Toulouse__FR/*http://weather.yahoo.com/forecast/FRXX0099_c.html&lt;/link&gt;
      &lt;pubDate&gt;Thu, 06 Mar 2008 3:00 pm CET&lt;/pubDate&gt;
      &lt;yweather:condition code="28" date="Thu, 06 Mar 2008 3:00 pm CET" temp="8" text="Mostly Cloudy"/&gt;
      &lt;description&gt;
        &lt;![CDATA[&lt;img src="http://l.yimg.com/us.yimg.com/i/us/we/52/28.gif" /&gt;&lt;br /&gt;
        &lt;b&gt;Current Conditions:&lt;/b&gt;&lt;br /&gt;
        Mostly Cloudy, 8 C&lt;BR /&gt;&lt;BR /&gt;
        &lt;b&gt;Forecast:&lt;/b&gt;&lt;BR /&gt;
        Thu - Mostly Cloudy. High: 10 Low: 4&lt;br /&gt;
        Fri - Cloudy. High: 10 Low: 4&lt;br /&gt;
        &lt;br /&gt;
        &lt;a href="http://us.rd.yahoo.com/dailynews/rss/weather/Toulouse__FR/*http://weather.yahoo.com/forecast/FRXX0099_c.html"&gt;Full Forecast at Yahoo! Weather&lt;/a&gt;&lt;BR/&gt;
        (provided by The Weather Channel)&lt;br/&gt;]]&gt;
      &lt;/description&gt;
      &lt;yweather:forecast code="27" date="06 Mar 2008" day="Thu" high="10" low="4" text="Mostly Cloudy"/&gt;
      &lt;yweather:forecast code="26" date="07 Mar 2008" day="Fri" high="10" low="4" text="Cloudy"/&gt;
      &lt;guid isPermaLink="false"&gt;FRXX0099_2008_03_06_15_0_CET&lt;/guid&gt;
    &lt;/item&gt;
  &lt;/channel&gt;
&lt;/rss&gt;</screen></para>
      </section>

      <section id="soap-restsampleconsume">
        <title>Consume mode</title>

        <para>In this sample, we are going to expose a JBI service as REST
        service. The Service Unit configuration which will be used is :</para>

        <para><screen>&lt;jbi:jbi version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi"
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0"
 xmlns:sample="http://petals.ow2.org/sample"
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;
  &lt;!-- Import a Service into PEtALS =&gt; provides a Service. --&gt;
  &lt;jbi:consumes interface-name="sample:SampleProvider"
   service-name="sample:SampleProviderService"
   endpoint-name="SampleProvider"&gt;
   
   &lt;!-- CDK specific fields --&gt;
   &lt;petalsCDK:mep&gt;InOut&lt;/petalsCDK:mep&gt;
   &lt;petalsCDK:operation&gt;<emphasis role="bold">${input_operation}</emphasis>&lt;/petalsCDK:operation&gt;

   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:address&gt;<emphasis role="bold">RESTService</emphasis>&lt;/soap:address&gt;
   &lt;soap:mode&gt;<emphasis role="bold">REST</emphasis>&lt;/soap:mode&gt;
   &lt;soap:rest-add-namespace-uri&gt;http://petals.ow2.org/sample&lt;/soap:rest-add-namespace-uri&gt;
   &lt;soap:rest-add-namespace-prefix&gt;ns1&lt;/soap:rest-add-namespace-prefix&gt;
   &lt;soap:rest-remove-prefix-on-response&gt;<emphasis role="bold">*</emphasis>&lt;/soap:rest-remove-prefix-on-response&gt;
  &lt;/jbi:consumes&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;
</screen></para>

        <para>Each request to the REST URI
        <code>http://&lt;host&gt;:&lt;port&gt;/petals/services/RESTService/</code>
        will be forwarded to the SampleProviderEndpoint JBI endpoint.</para>

        <para>An incoming request on the URL
        <code>http://&lt;host&gt;:&lt;port&gt;/petals/services/RESTService/myOperation?param1=value1&amp;param2=value2</code>
        in GET mode will produce the following JBI message :</para>

        <para><screen>&lt;myOperation&gt;
  &lt;param1&gt;value1&lt;/param1&gt;
  &lt;param2&gt;value2&lt;/param2&gt;
&lt;/myOperation&gt;</screen></para>

        <para>With the <code>rest.add-namespace-*</code> parameters specified
        in the previous configuration, the JBI message will be like :</para>

        <para><screen>&lt;ns1:myOperation xmlns:ns1="http://petals.ow2.org/sample"&gt;
  &lt;ns1:param1&gt;value1&lt;/ns1:param1&gt;
  &lt;ns1:param2&gt;value2&lt;/ns1:param2&gt;
&lt;/ns1:myOperation&gt;</screen></para>

        <para>Let's suppose that the JBI service returns a JBI response like
        :</para>

        <para><screen>&lt;ns1:Response xmlns:ns1="http://petals.ow2.org/sample1" xmlns:ns2="http://petals.ow2.org/sample2" xmlns:ns3="http://petals.ow2.org/sample3"&gt;
  &lt;ns1:param1&gt;value1&lt;/ns1:param1&gt;
  &lt;ns2:param2&gt;value2&lt;/ns2:param2&gt;
  &lt;ns3:param3&gt;value3&lt;/ns3:param3&gt;
&lt;/ns1:Response&gt;</screen>If the
        <code>rest.remove-prefix-on-response</code> parameter is set to
        'ns1,ns2', the message returned to the REST service consumer will be
        :</para>

        <para><screen>&lt;Response xmlns:ns1="http://petals.ow2.org/sample1" xmlns:ns2="http://petals.ow2.org/sample2" xmlns:ns3="http://petals.ow2.org/sample3"&gt;
  &lt;param1&gt;value1&lt;/param1&gt;
  &lt;param2&gt;value2&lt;/param2&gt;
  &lt;ns3:param3&gt;value3&lt;/ns3:param3&gt;
&lt;/Response&gt;</screen>If the <code>rest.remove-prefix-on-response</code>
        parameter is set to '*', the message returned to the REST service
        consumer will be :</para>

        <para><screen>&lt;Response xmlns:ns1="http://petals.ow2.org/sample1" xmlns:ns2="http://petals.ow2.org/sample2" xmlns:ns3="http://petals.ow2.org/sample3"&gt;
  &lt;param1&gt;value1&lt;/param1&gt;
  &lt;param2&gt;value2&lt;/param2&gt;
  &lt;param3&gt;value3&lt;/param3&gt;
&lt;/Response&gt;</screen></para>
      </section>
    </section>
  </chapter>

  <chapter id="soap-ws-notif">
    <title>Web Service Notifications</title>

    <section id="soap-ws-notif-intro">
      <title>Intoduction</title>

      <para>The petals-bc-soap offers a Web Service Notification feature. It
      works as :</para>

      <figure>
        <title id="notifications">Handling Web Service notifications</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentwidth="70%"
                       fileref="../../resources/images/soap_topic.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>WS-N is a family of related specifications that define a standard
      Web Service approach to notification using a topic-based
      publish/subscribe pattern. You can get the WS-N specification <ulink
      url="???">here</ulink>. The SOAP binding component uses the
      petals-ws-star library to provide this feature.</para>

      <para>As defined in the WS-N specification, each notification consumer
      must subscribe to the notification producer to receive notification
      messages. In PEtALS, a topic is linked to a JBI endpoint. Each time that
      a message is received on this endpoint, a notification message will be
      sent to notification WS consumers (see <xref
      linkend="notifications" />).</para>
    </section>

    <section id="soap-ws-create">
      <title>Create a WS-N topic</title>

      <para>To create a WS-N topic, you need to deploy a service unit with a
      specific address format:</para>

      <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbi:jbi version="1.0" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0" 
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"
 xmlns:sample="http://petals.ow2.org/soap/sample"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;

  &lt;!-- Import a Service into PEtALS =&gt; provides a Service. --&gt;
  &lt;jbi:provides
   interface-name="sample:TopicInterface"
   service-name="sample:TopicService"
   endpoint-name="TopicEndpoint"&gt;

   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:address&gt;<emphasis role="bold">TopicSample</emphasis>&lt;/soap:address&gt;
   &lt;soap:mode&gt;<emphasis role="bold">TOPIC</emphasis>&lt;/soap:mode&gt;<co
          id="soap-co-id1" />
   ...
  &lt;/jbi:provides&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;
</screen>

      <calloutlist>
        <callout arearefs="soap-co-id1">
          <para>With the TOPIC mode, the topic specified in the address
          parameter will be created during Service Unit startup.</para>
        </callout>
      </calloutlist>

      <para>After deployment, a new JBI endpoint is available : TopicEndpoint.
      Each JBI message sent to this endpoint will be published on the topic. A
      WS-N producer is automatically created. It is in charge of handle the
      topic and send notification messages to all subscribers.</para>

      <para><note>
          <para>The topics are persisted by the component since the release
          3.1 so that all the required data is reloaded on restart.</para>
        </note></para>
    </section>

    <section id="soap-ws-notif-subs">
      <title>Subscribe to WS-N producer</title>

      <para>In order to receive WS-Notifications, the consumers MUST subscribe
      to these notifications to the WS-N producer.</para>

      <para>To subscribe to WS notification, the notification consumer must
      send a specific SOAP message to the notification producer. In the SOAP
      BC, subscription URL is <uri>http://HOST:PORT/wsn/producer</uri> where
      :</para>

      <itemizedlist>
        <listitem>
          <para>HOST is the host you have installed the SOAP BC</para>
        </listitem>

        <listitem>
          <para>PORT is the port where the SOAP BC listens to incoming SOAP
          messages</para>
        </listitem>
      </itemizedlist>

      <para>An example of a SOAP subscribe message is :</para>

      <screen>&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;
  &lt;soap:Header&gt;
    &lt;wsa:To xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
      http://localhost:8084/wsn-consumer/services/consumer
    &lt;/wsa:To&gt;
    &lt;wsa:Action xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
      http://docs.oasis-open.org/wsn/bw-2/NotificationProducer/SubscribeRequest
    &lt;/wsa:Action&gt;
    &lt;wsa:MessageID xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
      uuid:9888fa43-281f-ea0f-ec21-09e9119366c6
    &lt;/wsa:MessageID&gt;
    &lt;wsa:From xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
      &lt;wsa:Address&gt;http://www.w3.org/2005/08/addressing/role/anonymous&lt;/wsa:Address&gt;
    &lt;/wsa:From&gt;
  &lt;/soap:Header&gt;

  &lt;soap:Body&gt;
    &lt;wsnt:Subscribe xmlns:wsnt="http://docs.oasis-open.org/wsn/b-2"&gt;
      &lt;wsnt:ConsumerReference&gt;
        &lt;wsa:Address xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
          http://127.0.0.1:8084/wsn-consumer/services/consumer<co
          id="soap-co-id2" />
        &lt;/wsa:Address&gt;
      &lt;/wsnt:ConsumerReference&gt;
      &lt;wsnt:Filter&gt;
         &lt;wsnt:TopicExpression Dialect="xsd:anyURI"&gt;TopicSample&lt;/wsnt:TopicExpression&gt;<co
          id="soap-co-id3" />
      &lt;/wsnt:Filter&gt;
    &lt;/wsnt:Subscribe&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</screen>

      <calloutlist>
        <callout arearefs="soap-co-id2">
          <para>The address to send notifications messages to. This can be
          simply a Web Service endpoint which can handle notification
          message</para>
        </callout>

        <callout arearefs="soap-co-id3">
          <para>The name of the topic to subscribe to</para>
        </callout>
      </calloutlist>

      <para>Subscribers can use the PEtALS WS-N client API to subscribe to
      topics. It can be done like this :</para>

      <screen>package org.ow2.petals.binding.soap.wsn;

import java.net.URI;

import javax.xml.namespace.QName;

import org.ow2.petals.ws.addressing.EndpointReference;
import org.ow2.petals.ws.client.SubscriptionClient;
import org.ow2.petals.ws.client.WsnProducerClient;
import org.ow2.petals.ws.fault.WsnFault;
import org.ow2.petals.ws.notification.TopicExpressionFilter;

/**
 * Web service notification subscription.
 *
 */
public class SubscribeClient {

    /**
     * @param args
     */
    public static void main(String[] args) {

        EndpointReference sourceEPR = new EndpointReference(URI
                .create("http://localhost:9090/wsn-consumer/"));
        EndpointReference destinationEPR = new EndpointReference(URI
                .create("http://localhost:9090/wsn-consumer/service/consumer"));

        WsnProducerClient client = new WsnProducerClient(sourceEPR,
                destinationEPR);

        TopicExpressionFilter filter = null;
        try {
            filter = new TopicExpressionFilter(new QName("topicSample"));
        } catch (WsnFault e1) {
            e1.printStackTrace();
        }

        SubscriptionClient subsClient = null;
        try {
            subsClient = client.subscribe(sourceEPR, filter, null);
        } catch (WsnFault e) {
            e.printStackTrace();
        }
    }
}</screen>

      <para><note>
          <para>All the subscriptions are persisted in the component work
          folder to be able to reload subscriptions on component
          restart.</para>
        </note><note>
          <para>If there are N subscriptions for the same notification
          consumer, the notification message will be sent N times. The first
          unsubscribe call will remove all the subscriptions for this
          consumer.</para>
        </note></para>
    </section>

    <section id="soap-ws-notif-send">
      <title>Send a WS notification from a JBI message</title>

      <para>When the petals-bc-soap component receives a JBI message on a
      topic-activated endpoint, it is transformed into a WS notification
      message and published on the linked topic.</para>

      <para>As an example of SOAP notification message, if the JBI message
      payload is :</para>

      <screen>&lt;text&gt;This is a sample of JBI message payload...&lt;/text&gt;</screen>

      <para>and if it is published on the '<emphasis
      role="bold">TopicSample</emphasis>' topic, the SOAP body payload of the
      notification message will be :</para>

      <screen>&lt;wsnt:Notify&gt;
  &lt;wsnt:NotificationMessage&gt;
    &lt;wsnt:SubscriptionReference&gt;
      &lt;wsa:Address xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
        http://127.0.0.1:8084/wsn-consumer/services/consumer
      &lt;/wsa:Address&gt;
    &lt;/wsnt:SubscriptionReference&gt;
    &lt;wsnt:Topic Dialect="xsd:anyURI"&gt;TopicSample&lt;/wsnt:Topic&gt;
    &lt;wsnt:ProducerReference&gt;
      &lt;wsa:Address xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
        http://127.0.0.1:8084/wsn-producer/services/producer
    &lt;/wsa:Address&gt;
    &lt;/wsnt:ProducerReference&gt;
    &lt;wsnt:Message&gt;
      &lt;text&gt;This is a sample of JBI message payload...&lt;/text&gt;
    &lt;/wsnt:Message&gt;
  &lt;/wsnt:NotificationMessage&gt;
&lt;/wsnt:Notify&gt;</screen>
    </section>
  </chapter>

  <chapter>
    <title>Security</title>

    <section>
      <title>Introduction</title>

      <para>The SOAP binding component provides WS security features through
      the Axis2 rampart module (<ulink
      url="http://ws.apache.org/rampart/index.html">http://ws.apache.org/rampart/index.html</ulink>).</para>

      <para>This module is based on Apache WSS4J (<ulink
      url="http://ws.apache.org/wss4j">http://ws.apache.org/wss4j</ulink>), an
      implementation of the OASIS WS-security (<ulink
      url="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wss">http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wss</ulink>).</para>

      <para>This module is natively provided by the binding component since
      the 3.0 release.</para>
    </section>

    <section>
      <title>Securing JBI Services</title>

      <section>
        <title>Configuration</title>

        <para>In order to enable WS-security, you must add specific extensions
        to the consumes section of the Service Unit. This configuration will
        tell Rampart which security mode to be applied. Here's an example of a
        jbi.xml providing a simple Rampart configuration, with UsernameToken
        and Timestamping authentification :</para>

        <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbi:jbi version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi"
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0"
 xmlns:helloworld="http://petals.ow2.org/helloworld"
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;

  &lt;!-- Expose a PEtALS Service =&gt; consumes a Service. --&gt;
  &lt;jbi:consumes interface-name="helloworld:Helloworld" service-name="helloworld:HelloworldService" endpoint-name="HelloworldEndpoint"&gt;

   &lt;!-- CDK specific fields --&gt;
   &lt;petalsCDK:mep&gt;InOut&lt;/petalsCDK:mep&gt;

   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:address&gt;UserPasswordSecuredService&lt;/soap:address&gt;
   &lt;soap:remove-root&gt;false&lt;/soap:remove-root&gt;
   &lt;soap:mode&gt;SOAP&lt;/soap:mode&gt;
   &lt;soap:modules&gt;<emphasis role="bold">rampart</emphasis>&lt;/soap:modules&gt;
   &lt;soap:service-parameters&gt;
    <emphasis role="bold">&lt;![CDATA[
     &lt;parameter name="InflowSecurity"&gt;
      &lt;action&gt;
       &lt;items&gt;UsernameToken Timestamp&lt;/items&gt;
       &lt;passwordCallbackClass&gt;org.ow2.petals.usecase.soapsecurity.handler.RawCBHandler&lt;/passwordCallbackClass&gt;
      &lt;/action&gt;
     &lt;/parameter&gt;
    ]]&gt;</emphasis>
   &lt;/soap:service-parameters&gt;
  &lt;/jbi:consumes&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;      </screen>

        <para>On this example, an Axis2 service will be created
        (MyExampleService) and is secured by a defined security
        handler:</para>

        <itemizedlist>
          <listitem>
            <para>The <emphasis
            role="bold">&lt;soap:modules&gt;rampart&lt;/soap:modules&gt;</emphasis>
            tag allows to engage the rampart module for the
            UserPasswordSecuredService service.</para>
          </listitem>

          <listitem>
            <para>The <emphasis
            role="bold">&lt;soap:service-parameters&gt;</emphasis> tag allows
            to configure rampart for this service, using the InflowSecurity
            parameter (you can also use the OutflowSecurity parameter).</para>
          </listitem>
        </itemizedlist>

        <para>The
        <classname>org.ow2.petals.usecase.soapsecurity.handler.RawCBHandler</classname>
        Class is the handler used by the service. The following code snippet
        is an example of Handler implementation to validate user/password
        credentials:</para>

        <screen>package org.ow2.petals.usecase.soapsecurity.handler;

import org.apache.ws.security.WSPasswordCallback;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.UnsupportedCallbackException;

import java.io.IOException;

public class RawCBHandler implements CallbackHandler {

    public void handle(Callback[] callbacks) throws IOException,
            UnsupportedCallbackException {
        for (int i = 0; i &lt; callbacks.length; i++) {
            WSPasswordCallback pwcb = (WSPasswordCallback)callbacks[i];
            String id = pwcb.getIdentifer();
            if("bob".equals(id)) {
                pwcb.setPassword("bobPW");
            }
        }
    }
}
      </screen>

        <para>This class MUST be in the service classloader, the easiest way
        is to package it in the service unit. It will be handled by the SOAP
        binding component and the Rampart module.</para>

        <note>
          <para>If you use maven2 to package you service unit, you just have
          to add this java class under a <filename
          class="directory">src/main/java</filename> directory of your
          jbi-service-unit project or add a dependency to the handler
          library.</para>
        </note>

        <para>The service is now secured with Rampart. If a SOAP message
        without security headers is handled by the service, a SOAP fault will
        be returned with message like: <emphasis role="italic">"Incoming
        message does not contain required Security header".</emphasis></para>
      </section>

      <section>
        <title>Client side</title>

        <para>The SOAP header must contains the required security elements
        like in the following SOAP message snippet :</para>

        <screen>&lt;soapenv:Header&gt;
   &lt;wsse:Security
    xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
    soapenv:mustUnderstand="1"&gt;
      &lt;wsu:Timestamp
       xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
       wsu:Id="Timestamp-26598747"&gt;
         &lt;wsu:Created&gt;2007-07-30T14:59:34.944Z&lt;/wsu:Created&gt;
         &lt;wsu:Expires&gt;2007-07-30T15:04:34.944Z&lt;/wsu:Expires&gt;
      &lt;/wsu:Timestamp&gt;
      &lt;wsse:UsernameToken
       xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
       wsu:Id="UsernameToken-6427893"&gt;
         &lt;wsse:Username&gt;bob&lt;/wsse:Username&gt;
         &lt;wsse:Password
          Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest"&gt;
            0ziDIJ4Gd0XHbbbB/rgasDpOZJY=
         &lt;/wsse:Password&gt;
         &lt;wsse:Nonce&gt;
            fqgz0lkb7/ezFiY7Km4qvg==
         &lt;/wsse:Nonce&gt;
         &lt;wsu:Created&gt;
            2007-07-30T14:59:34.944Z
         &lt;/wsu:Created&gt;
      &lt;/wsse:UsernameToken&gt;
   &lt;/wsse:Security&gt;
&lt;/soapenv:Header&gt;</screen>

        <para>The following code snippet shows how to engage the rampaet
        module on the client side and how to call the Web Service :</para>

        <screen>ConfigurationContext ctx = ConfigurationContextFactory
  .createConfigurationContextFromFileSystem(axis2ConfPath, null);

ServiceClient client = new ServiceClient(ctx, null);
OMElement payload = getSayHelloOMElement(sayHelloStr);

Options options = new Options();
options.setProperty(WSSHandlerConstants.OUTFLOW_SECURITY, getOutflowConfiguration("bob"));
client.engageModule(new QName("rampart"));

options.setTo(targetEPR);
options.setAction("sayHello");

client.setOptions(options);
result = client.sendReceive(payload);
       </screen>

        <para>The <filename class="directory">axis2ConfPath</filename>
        directory must point to a directory in which a <filename
        class="directory">modules</filename> directory contains the
        <filename>rampart-1.2.mar</filename> module used by the client. The
        code also uses a Class handler which is similar to the service's one,
        and will provide the required user and password :</para>

        <screen>package org.ow2.petals.security.client.handler;

import org.apache.ws.security.WSPasswordCallback;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.UnsupportedCallbackException;

import java.io.IOException;

public class MyExampleClientHandler implements CallbackHandler {

    public void handle(Callback[] callbacks) throws IOException,
            UnsupportedCallbackException {
        for (int i = 0; i &lt; callbacks.length; i++) {
            WSPasswordCallback pwcb = (WSPasswordCallback)callbacks[i];
            String id = pwcb.getIdentifer();
            if("bob".equals(id)) {
                pwcb.setPassword("bobPW");
            }
        }
    }
}
      </screen>

        <para>In this example, the user name is sent in <emphasis role="bold">
        plain clear text</emphasis> in the request. Depending on your security
        needs, you should use a secured transport layer (such as HTTPS), or
        another Rampart configuration to encrypt the information (and even the
        body content if required). For more Rampart configuration examples,
        you should have a look at the samples provided by Apache in the
        rampart distribution at : <ulink
        url="http://www.apache.org/dyn/closer.cgi/ws/rampart/1_3">
        http://www.apache.org/dyn/closer.cgi/ws/rampart/1_3</ulink>.</para>
      </section>
    </section>

    <section>
      <title>Using WS-Policy</title>

      <para>The Apache Rampart module is used to apply policies when calling
      an external Web Service (ie in consumer mode). The current section
      explains how to configure the component to use this feature.</para>

      <section>
        <title>Configuration</title>

        <para>The WS-Policy configuration is defined at the Service Unit level
        like in the following Service Unit descriptor snippet (jbi.xml)
        :</para>

        <para><screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jbi:jbi version="1.0" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:jbi="http://java.sun.com/xml/ns/jbi
 xmlns:petalsCDK="http://petals.ow2.org/components/extensions/version-4.0" 
 xmlns:soap="http://petals.ow2.org/components/soap/version-3.1"
 xmlns:sample="http://petals.ow2.org/soap/sample"&gt;

 &lt;!-- Import a Service into PEtALS or Expose a PEtALS Service =&gt; use a BC. --&gt;
 &lt;jbi:services binding-component="true"&gt;

  &lt;!-- Import a Service into PEtALS =&gt; provides a Service. --&gt;
  &lt;jbi:provides
   interface-name="sample:PolicyInterface"
   service-name="sample:PolicyService"
   endpoint-name="PolicyEndpoint"&gt;

   &lt;!-- CDK specific fields --&gt;
   &lt;petalsCDK:mep xsi:nil="true"/&gt;
   
   &lt;!-- WSDL file --&gt;
   &lt;petalsCDK:wsdl&gt;sample02.wsdl.wsdl&lt;/petalsCDK:wsdl&gt;

   &lt;!-- SOAP specific fields --&gt;
   &lt;soap:address&gt;<emphasis role="bold">http://localhost:8888/axis2/services/PolicyService</emphasis>&lt;/soap:address&gt;
   &lt;soap:mode&gt;SOAP&lt;/soap:mode&gt;
   &lt;soap:policy-path&gt;<emphasis role="bold">policy</emphasis>&lt;/soap:policy-patth&gt;
  &lt;/jbi:provides&gt;
 &lt;/jbi:services&gt;
&lt;/jbi:jbi&gt;
</screen>The WS-Policy is activated when the field
        <emphasis>policy-path</emphasis> is defined in the Service Unit (the
        Rampart module is automatically engaged if needed). This path is
        relative to the Service Unit root path. With the previous declaration,
        the Service Unit strucutre must be :</para>

        <para><mediaobject>
            <imageobject>
              <imagedata align="left" contentwidth="80%"
                         fileref="../../resources/images/soap_policy_folder.png" />
            </imageobject>
          </mediaobject></para>

        <para>In the policy path, the <filename>policy.xml</filename> contains
        the policy decriptor provided by the Web Service (in the current
        version, the policy can not be retrieved from the WSDL description).
        It also contains the keystore and a properties configuration file used
        by Rampart at runtime.</para>

        <para><note>
            <para>The current version of the component does not extract the
            policy description from the WSDL one. You must define it in the
            <filename>policy.xml</filename> file.</para>
          </note>An example of policy description file (taken from Rampart
        samples) could be :</para>

        <para><screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wsp:Policy wsu:Id="SigOnly" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"&gt;
 &lt;wsp:ExactlyOne&gt;
  &lt;wsp:All&gt;
   &lt;sp:AsymmetricBinding xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"&gt;
    &lt;wsp:Policy&gt;
     &lt;sp:InitiatorToken&gt;
      &lt;wsp:Policy&gt;
       &lt;sp:X509Token sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient"&gt;
        &lt;wsp:Policy&gt;
            &lt;sp:RequireThumbprintReference/&gt; 
            &lt;sp:WssX509V3Token10/&gt;
        &lt;/wsp:Policy&gt;
       &lt;/sp:X509Token&gt;
      &lt;/wsp:Policy&gt;
     &lt;/sp:InitiatorToken&gt;
     &lt;sp:RecipientToken&gt;
      &lt;wsp:Policy&gt;
       &lt;sp:X509Token sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/Never"&gt;
         &lt;wsp:Policy&gt;
           &lt;sp:RequireThumbprintReference/&gt;
           &lt;sp:WssX509V3Token10/&gt;
         &lt;/wsp:Policy&gt;
       &lt;/sp:X509Token&gt;
      &lt;/wsp:Policy&gt;
     &lt;/sp:RecipientToken&gt;
     &lt;sp:AlgorithmSuite&gt;
      &lt;wsp:Policy&gt;
       &lt;sp:TripleDesRsa15/&gt;
      &lt;/wsp:Policy&gt;
     &lt;/sp:AlgorithmSuite&gt;
     &lt;sp:Layout&gt;
      &lt;wsp:Policy&gt;
       &lt;sp:Strict/&gt;
      &lt;/wsp:Policy&gt;
     &lt;/sp:Layout&gt;
     &lt;sp:IncludeTimestamp/&gt;
     &lt;sp:OnlySignEntireHeadersAndBody/&gt;
    &lt;/wsp:Policy&gt;
   &lt;/sp:AsymmetricBinding&gt;
   &lt;sp:Wss10 xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"&gt;
    &lt;wsp:Policy&gt;
     &lt;sp:MustSupportRefKeyIdentifier/&gt;
     &lt;sp:MustSupportRefIssuerSerial/&gt;
    &lt;/wsp:Policy&gt;
   &lt;/sp:Wss10&gt;
   &lt;sp:SignedParts xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"&gt;
    &lt;sp:Body/&gt;
   &lt;/sp:SignedParts&gt;

   &lt;ramp:RampartConfig xmlns:ramp="http://ws.apache.org/rampart/policy"&gt; 
    &lt;ramp:user&gt;client&lt;/ramp:user&gt;
    &lt;ramp:encryptionUser&gt;service&lt;/ramp:encryptionUser&gt;
    &lt;ramp:passwordCallbackClass&gt;org.apache.rampart.samples.policy.sample02.PWCBHandler&lt;/ramp:passwordCallbackClass&gt;
    &lt;ramp:signatureCrypto&gt;
     &lt;ramp:crypto provider="org.apache.ws.security.components.crypto.Merlin"&gt;
      &lt;ramp:property name="org.apache.ws.security.crypto.merlin.keystore.type"&gt;JKS&lt;/ramp:property&gt;
      &lt;ramp:property name="org.apache.ws.security.crypto.merlin.file"&gt;client.jks&lt;/ramp:property&gt;
      &lt;ramp:property name="org.apache.ws.security.crypto.merlin.keystore.password"&gt;apache&lt;/ramp:property&gt;
     &lt;/ramp:crypto&gt;
    &lt;/ramp:signatureCrypto&gt;
   &lt;/ramp:RampartConfig&gt;

  &lt;/wsp:All&gt;
 &lt;/wsp:ExactlyOne&gt;
&lt;/wsp:Policy&gt;</screen>The extension <emphasis>RampartConfig</emphasis>
        is used by Rampart for configuration purposes. With the previous
        sample, the passwordCallbackClass
        <emphasis>org.apache.rampart.samples.policy.sample02.PWCBHandler</emphasis>
        must be found in the service classpath (it will be automatically
        included if the class is packaged in the Service Unit, in a JAR for
        example).</para>

        <para><note>
            <para>You can find more examples on how to use Rampart on the
            Rampart samples page at <ulink
            url="http://ws.apache.org/rampart/samples.html">http://ws.apache.org/rampart/samples.html</ulink>.</para>
          </note></para>
      </section>

      <section>
        <title>Usage</title>

        <para>Once the Service Unit is deployed on the SOAP Binding Component,
        all the JBI messages sent to the new activated endpoint are
        transformed into SOAP messages and the Web Service client will use the
        Service Unit defined policy to call the Web Service. The Web Service
        client behaviour is exactly the same as a policy-enabled Axis2 based
        Web Service client.</para>

        <para>An example of WS policy with PEtALS is provided in the PEtALS
        SOAP usecases at <ulink
        url="http://svn.forge.objectweb.org/cgi-bin/viewcvs.cgi/petals/trunk/petals-demos/petals-usecases/petals-soap/petals-soap-policy/">http://svn.forge.objectweb.org/cgi-bin/viewcvs.cgi/petals/trunk/petals-demos/petals-usecases/petals-soap/petals-soap-policy/</ulink></para>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>WS-Addressing</title>

    <para>The WS-Addressing support has been added since the component version
    4. For more information on WS-Addressing, please refer to the
    specification at <ulink
    url="http://www.w3.org/Submission/ws-addressing/">http://www.w3.org/Submission/ws-addressing/</ulink>.</para>

    <para>The WS-Addressing properties are defined at the JBI Normalized
    Message level as a Map in the
    <property>javax.jbi.messaging.protocol.headers</property> property like
    this :</para>

    <para><itemizedlist>
        <listitem>
          <para>The Map entry key is the WS-Addressing property name as
          String. It means that the wsa:To property key value is
          <property>{http://www.w3.org/2005/08/addressing}To</property> (the
          QName as String).</para>
        </listitem>

        <listitem>
          <para>The Map entry value is a DocumentFragment containing the
          WS-Addressing fragment.According to the WS-Addressing specification,
          these document fragments :</para>
        </listitem>
      </itemizedlist></para>

    <para>According to these choices, and to the WS-Addressing specification,
    the WS-Addressing properties are organized in the map like this :</para>

    <para><itemizedlist>
        <listitem>
          <para><screen>&lt;wsa:ReplyTo&gt;
  &lt;wsa:Address&gt;http://example.org/client1&lt;/wsa:Address&gt;
&lt;/wsa:ReplyTo&gt;
</screen>will be the
          <property>{http://www.w3.org/2005/08/addressing}ReplyTo</property>
          value.</para>
        </listitem>

        <listitem>
          <para><screen>&lt;wsa:To&gt;http://example.org/Service&lt;/wsa:To&gt;</screen></para>

          <para>will be the
          <property>{http://www.w3.org/2005/08/addressing}To</property>
          value.</para>
        </listitem>

        <listitem>
          <para><screen>&lt;wsa:FaultTo&gt;
  &lt;wsa:Address&gt;http://example.org/client1&lt;/wsa:Address&gt;
&lt;/wsa:FaultTo&gt;</screen></para>

          <para>will be the
          <property>{http://www.w3.org/2005/08/addressing}FaultTo</property>
          value.</para>
        </listitem>

        <listitem>
          <para>...</para>
        </listitem>
      </itemizedlist><note>
        <para>The PEtALS Component Development Kit (CDK) provides easy way to
        get and set these properties without DocumentFragment manipulation.
        Please refer to the
        <methodname>org.ow2.petals.component.framework.api.message#getXXXAddressing()</methodname>
        and
        <methodname>org.ow2.petals.component.framework.api.message#setXXXAddressing()</methodname>
        methods.</para>
      </note></para>

    <section id="soap-wsaddr-provide">
      <title>Use WS-Addressing to call an external service</title>

      <para>When the JBI message contains the <property>wsa:To</property>
      property in the WS-Addressing map (explained before), the endpoint
      reference will be used as the service URL to call. This property has the
      highest priority in the URL choice. It means that the Service Unit
      property is overrided by the message level one.</para>

      <para>On the JBI service consumer side, the WS-Addressing properties can
      be set in several ways :</para>

      <orderedlist>
        <listitem>
          <para>Use the CDK message API (see before)</para>
        </listitem>

        <listitem>
          <para>Set the DocumentFragment in the Map yourself (not
          recomended)</para>
        </listitem>

        <listitem>
          <para>If the service is consumed by a Binding Component, check that
          this component supports WS-Addressing.</para>

          <para>For example, the current SOAP component gets the WS-Addressing
          information from the incoming SOAP message and put it automatically
          in the JBI message property.</para>
        </listitem>
      </orderedlist>
    </section>

    <section id="soap-wsaddr-consume">
      <title>Use WS-Addressing to call a JBI service</title>

      <para><warning>
          <para>This part is under development</para>
        </warning>The WS-Addressing properties of the incoming SOAP message
      can be used to choose the JBI service to call. The WS-Addressing
      properties are defined like this :</para>
    </section>
  </chapter>

  <chapter id="soap-samples">
    <title>Samples</title>

    <para>The SOAP binding component samples are available as packaged use
    cases. You can find them in the download section of the project <ulink
    url="http://petals.ow2.org/downloads.html#usecases">http://petals.ow2.org/downloads.html#usecases</ulink>.</para>
  </chapter>

  <chapter>
    <title>Know problems</title>

    <section>
      <title>"Transport out has not been set"</title>

      <para>If the exception message "Transport out has not been set" occurs
      when invoking an external web-service, using the petals-bc-soap, it can
      be due to a wrong URL of the external web-service. Please check it and
      retry your test.</para>
    </section>
  </chapter>
</book>
